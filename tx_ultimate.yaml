substitutions:
  name: "shys-tx-ultimate"
  friendly_name: "TX Ultimate"

  button_count: "4"

  toggle_relay_1_on_touch: "false"
  toggle_relay_2_on_touch: "false"
  toggle_relay_3_on_touch: "false"
  toggle_relay_4_on_touch: "false"

  vibra_time: 150ms
  button_on_time: 500ms

  nightlight: "on"
  nightlight_brightness: "0.2"
  nightlight_color: "{80,70,0}"

  latitude: "50.123456°"
  longitude: "5.654321°"

  touch_color: "{0,100,100}"
  touch_effect: "Scan"

  very_long_press_brightness: "1"
  very_long_press_color: "{0,100,0}"
  very_long_press_effect: "Scan"

  long_press_color: "{0,100,0}"
  long_press_time: "1000"

  multi_touch_brightness: "1"
  multi_touch_color: "{0,0,0}"
  multi_touch_effect: "Rainbow"

  swipe_left_brightness: "1"
  swipe_left_color: "{0,100,0}"
  swipe_left_effect: ""

  swipe_right_brightness: "1"
  swipe_right_color: "{100,0,70}"
  swipe_right_effect: ""

  after_touch_dim_delay: 500ms
  swipe_between_led_delay: 50ms
  dim_between_led_delay: 50ms

  relay_1_pin: GPIO18
  relay_2_pin: GPIO17
  relay_3_pin: GPIO27
  relay_4_pin: GPIO23

  vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13
  status_led_pin: GPIO33

  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO22

  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

  touchpanel_power_pin: GPIO5

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  project:
    name: smarthomeyourself.tx_ultimate
    version: "1.0"
  includes:
    - my_util.h

  on_boot:
    priority: -100
    then:
      - binary_sensor.template.publish:
          id: button_1
          state: OFF
      - binary_sensor.template.publish:
          id: button_2
          state: OFF
      - binary_sensor.template.publish:
          id: button_3
          state: OFF
      - binary_sensor.template.publish:
          id: button_4
          state: OFF
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF
      - binary_sensor.template.publish:
          id: long_press_1
          state: OFF
      - binary_sensor.template.publish:
          id: long_press_2
          state: OFF
      - binary_sensor.template.publish:
          id: long_press_3
          state: OFF
      - binary_sensor.template.publish:
          id: long_press_4
          state: OFF
      - binary_sensor.template.publish:
          id: very_long_press
          state: OFF
      - script.execute: refresh_nightlight

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
#  hardware_uart: UART2
  level: DEBUG
  logs:
    binary_sensor: INFO
    light: INFO
    script: INFO
    switch: INFO
#    tx_ultimate_touch: INFO
    uart_debug: INFO

dashboard_import:
  package_import_url: github://SmartHome-yourself/sonoff-tx-ultimate-for-esphome/tx_ultimate.yaml@main
  import_full_config: false

api:

ota:
 - platform: esphome

wifi:
  ap:
    password: "12345678"
    
improv_serial:

captive_portal:

external_components:
#  - source: /config/esphome/my_components
  - source:
      type: git
      url: https://github.com/duncati/sonoff-tx-ultimate-for-esphome
      ref: main
    components: [tx_ultimate_touch]

globals:
  - id: nightlight_color
    type: int [3]
    restore_value: no
    initial_value: ${nightlight_color}
  - id: long_press_color
    type: int [3]
    restore_value: no
    initial_value: ${long_press_color}
  - id: very_long_press_color
    type: int [3]
    restore_value: no
    initial_value: ${very_long_press_color}
  - id: multi_touch_color
    type: int [3]
    restore_value: no
    initial_value: ${multi_touch_color}
  - id: swipe_left_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_left_color}
  - id: swipe_right_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_right_color}
  - id: touch_color
    type: int [3]
    restore_value: no
    initial_value: ${touch_color}    
  - id: button_press_start_time
    type: uint32_t[4]
    restore_value: no
    initial_value: '{0, 0, 0, 0}'
  - id: original_led_color
    type: esphome::Color[4]
    restore_value: no
    initial_value: '{ esphome::Color(0, 0, 0), esphome::Color(0, 0, 0), esphome::Color(0, 0, 0), esphome::Color(0, 0, 0) }'
  - id: button_lookup
    type: uint8_t[4][10]
    restore_value: no
    initial_value: '{{{1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, {1, 1, 1, 1, 1, 2, 2, 2, 2, 2}, {1, 1, 1, 2, 2, 2, 3, 3, 3, 3}, {1, 1, 2, 2, 2, 3, 3, 3, 4, 4}}}'

#text_sensor:
# - platform: template
#   name: "Touch Color"
#   id: touch_color_string
#   on_value:
#     then:
#       - lambda: 'ESP_LOGI("main", "Setting touch color string to %s", x);'
#   lambda: 'return "0000FF";'

# - platform: template
#   name: "Long Press Color"
#   id: long_press_color_string
#   on_value:
#     then:
#       - lambda: 'ESP_LOGI("main", "Setting long press color string to %s", x);'
#   lambda: 'return "FF00FF";'

binary_sensor:
  - platform: template
    name: "Button 1"
    id: button_1
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_1_on_touch};"
          then:
            - switch.toggle: relay_1
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: button_1
          state: OFF

  - platform: template
    name: "Button 2"
    id: button_2
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_2_on_touch};"
          then:
            - switch.toggle: relay_2
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: button_2
          state: OFF

  - platform: template
    name: "Button 3"
    id: button_3
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_3_on_touch};"
          then:
            - switch.toggle: relay_3
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: button_3
          state: OFF

  - platform: template
    name: "Button 4"
    id: button_4
    on_press:
      - if:
          condition:
            lambda: "return ${toggle_relay_4_on_touch};"
          then:
            - switch.toggle: relay_4
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: button_4
          state: OFF

  - platform: template
    name: "Swipe left"
    id: swipe_left
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF

  - platform: template
    name: "Swipe_right"
    id: swipe_right
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF

  - platform: template
    name: "Multi Touch"
    id: multi_touch
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF

  - platform: template
    name: "Long Press 1"
    id: long_press_1
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press_1
          state: OFF

  - platform: template
    name: "Long Press 2"
    id: long_press_2
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press_2
          state: OFF

  - platform: template
    name: "Long Press 3"
    id: long_press_3
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press_3
          state: OFF

  - platform: template
    name: "Long Press 4"
    id: long_press_4
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press_4
          state: OFF

  - platform: template
    name: "Very Long Press"
    id: very_long_press
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: very_long_press
          state: OFF

switch:
  - platform: gpio
    id: relay_1
    name: "${friendly_name} L1"
    pin: ${relay_1_pin}
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    id: relay_2
    name: "${friendly_name} L2"
    pin: ${relay_2_pin}
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    id: relay_3
    name: "${friendly_name} L3"
    pin: ${relay_3_pin}
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    id: relay_4
    name: "${friendly_name} L4"
    pin: ${relay_4_pin}
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: gpio
    id: vibra
    pin: ${vibra_motor_pin}
    name: "${friendly_name} Vibration"
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: ${vibra_time}
      - switch.turn_off: vibra

  - platform: gpio
    id: pa_power
    pin: ${pa_power_pin}
    name: "PA Power"
    internal: true
    restore_mode: ALWAYS_ON

  - platform: gpio
    name: "touch panel power"
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    id: touch_power
    internal: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    name: "Nightlight"
    id: nightlight
    internal: true
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: "Nightlight"
    id: nightlight_active
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: restart
    name: "${friendly_name} Restart"

light:
  - platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: ${led_pin}
    num_leds: 28
    name: "NeoPixel Light"
    id: leds
    default_transition_length: 0s
    effects:
      - addressable_rainbow:
          name: "Rainbow"
          speed: 30
          width: 8
      - pulse:
          name: "Pulse"
          transition_length: 1.4s
          update_interval: 1s

  - platform: partition
    name: "LEDs Nightlight"
    id: leds_nightlight
    internal: true
    segments:
      - id: leds
        from: 0
        to: 6
      - id: leds
        from: 8
        to: 8
      - id: leds
        from: 10
        to: 10
      - id: leds
        from: 12
        to: 19
      - id: leds
        from: 27
        to: 27
      - id: leds_top
        from: 0
        to: 6

  - platform: partition
    name: "All LEDs"
    id: all_leds
    internal: true
    segments:
      - id: leds
        from: 0
        to: 27

  - platform: partition
    name: "LEDs Top"
    id: leds_top
    internal: true
    segments:
      - id: leds
        from: 20
        to: 26
    effects:
      - addressable_scan:
          name: "Scan"
      - addressable_rainbow:
          name: "Rainbow"
          speed: 10
          width: 20

media_player:
  - platform: i2s_audio
    id: media_out
    name: ${friendly_name} Player
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    i2s_comm_fmt: lsb
    mode: mono

i2s_audio:
  id: audio_i2s
  i2s_lrclk_pin: ${audio_lrclk_pin}
  i2s_bclk_pin: ${audio_bclk_pin}

uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 2s
      bytes: 2048
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

tx_ultimate_touch:
  id: tx_touch
  uart: my_uart

  on_press:
    - lambda: |-
        ESP_LOGW("tx_ultimate_touch.on_press", "Touch Position: %d / State: %d", touch.x, touch.state);
        //auto led_and_button = get_led_and_button_at_x(touch.x, ${button_count});
        //id(led_on_button_press)->execute(led_and_button[0], led_and_button[1]);
        auto button = id(button_lookup)[${button_count}-1][touch.x-1];
        ESP_LOGI("button", "translated %d x to button %d", touch.x, button);
        // TODO consider moving led_index logic into these dim_led_at methods
        // especially for both top and bottom leds
        int bottom_led_index = 1;
        switch(${button_count}) {
          case 4: bottom_led_index = 14 - 2*button; break;
          case 3: bottom_led_index = 13 - 2*button; break;
          case 2: bottom_led_index = 12 - 2*button; break;
        }
        id(led_on_button_press)->execute(bottom_led_index, button);
    - switch.turn_on: vibra

  on_release:
#   - lambda: 'ESP_LOGI("button", "on_release stopping on_button_press");'
    - script.stop: led_on_button_press
    - lambda: |-
        //auto led_and_button = get_led_and_button_at_x(touch.x, ${button_count});
        //int led_index = led_and_button[0];
        //int button = led_and_button[1];
        int button = id(button_lookup)[${button_count}-1][touch.x-1];
        auto button_press_duration = millis() - id(button_press_start_time)[button-1];
        //ESP_LOGD("button", "Button %d held for %u ms", button, button_press_duration);
        bool is_long_press = false;
        if (button_press_duration >= ${long_press_time}) {
          is_long_press = true;
          ESP_LOGD("button", "Button %d long pressed", button);
          switch(button) {
            case 1: id(long_press_1).publish_state(true); break;
            case 2: id(long_press_2).publish_state(true); break;
            case 3: id(long_press_3).publish_state(true); break;
            case 4: id(long_press_4).publish_state(true); break;
          }
        } else {
          switch(button) {
            case 1: id(button_1).publish_state(true); break;
            case 2: id(button_2).publish_state(true); break;
            case 3: id(button_3).publish_state(true); break;
            case 4: id(button_4).publish_state(true); break;
          }
        }
        int bottom_led_index = 1;
        switch(${button_count}) {
          case 4: bottom_led_index = 14 - 2*button; break;
          case 3: bottom_led_index = 13 - 2*button; break;
          case 2: bottom_led_index = 12 - 2*button; break;
        }
        switch(button) {
          case 1: id(dim_led_at_button_1)->execute(bottom_led_index, is_long_press); break;
          case 2: id(dim_led_at_button_2)->execute(bottom_led_index, is_long_press); break;
          case 3: id(dim_led_at_button_3)->execute(bottom_led_index, is_long_press); break;
          case 4: id(dim_led_at_button_4)->execute(bottom_led_index, is_long_press); break;
        }
    - lambda: >
        ESP_LOGW("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_left:
    - script.execute: led_on_swipe_left
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: swipe_left
        state: ON
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_left", "Swipe Left Position: %d / State: %d", touch.x, touch.state);

  on_swipe_right:
    - script.execute: led_on_swipe_right
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: swipe_right
        state: ON
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_right", "Swipe Right Position: %d / State: %d", touch.x, touch.state);

  on_full_touch_release:
    - script.execute: led_on_full_touch
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
        id: multi_touch
        state: ON
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_full_touch_release", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

  on_long_touch_release:
    - script.execute: led_on_long_touch
    - switch.turn_on: vibra
    - binary_sensor.template.publish:
       id: very_long_press
       state: ON
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_long_touch_release", "Very Long Touch Release Position: %d / State: %d", touch.x, touch.state);

time:
  - platform: homeassistant
    id: homeassistant_time
  - platform: sntp
    id: sntp_time
    on_time:
      # Every 5 minutes
      - seconds: 0
        minutes: /5
        then:
          - script.execute: refresh_nightlight

sun:
  latitude: ${latitude}
  longitude: ${longitude}

script:
  - id: led_on_button_press
    mode: parallel
    parameters:
      led_index: int
      button: int
    then:
      - lambda: |-
          esphome::light::AddressableLight* target_led = static_cast<esphome::light::AddressableLight *>(id(all_leds).get_output());
          if (id(button_press_start_time)[button-1] == 0) {
            // this button has been pressed twice in a row, don't alter original_color
            auto original_color = target_led->get(led_index).get();
            ESP_LOGD("button", "button %d press at LED %d, color was %d %d %d", button, led_index, original_color.r, original_color.g, original_color.b);
            id(original_led_color)[button-1] = original_color;
          } else {
            ESP_LOGI("button", "button %d press at LED %d, button pressed before fade completed", button, led_index);
          }
          id(button_press_start_time)[button-1] = millis();
          target_led->get(led_index).set(esphome::Color(id(touch_color)[0], id(touch_color)[1], id(touch_color)[2]));
          target_led->schedule_show();
# This script is stopped by on_release, so only if the button is held long enough 
# will the long press color turn on.
      - delay: ${long_press_time}ms
      - lambda: |-
          ESP_LOGI("button", "button %d possibly long pressed, not stopped", button);
          if (millis() - id(button_press_start_time)[button-1] > ${long_press_time}) {
            esphome::light::AddressableLight* target_led = static_cast<esphome::light::AddressableLight *>(id(all_leds).get_output());
            target_led->get(led_index).set(esphome::Color(id(long_press_color)[0], id(long_press_color)[1], id(long_press_color)[2]));
            target_led->schedule_show();
            id(vibra).turn_on();
          }

# The lovely ESPHome framework will stop execution of a script, even in parallel mode, if it's called
# again while the first execution is in a delay. The solution: duplicate this dim script for each
# button so that it does not get called twice. Thanks, ESPHome!
  - id: dim_led_at_button_1
    mode: restart
    parameters:
      led_index: int
      is_long_press: bool
    then:
      - delay: ${after_touch_dim_delay}
      - repeat:
          count: 10
          then:
            - lambda: |-
                auto original_color = id(original_led_color)[0];
                auto dim_color = (is_long_press) ? id(long_press_color) : id(touch_color);
                float factor = iteration * 0.1f;
                int r = dim_color[0]*(1.0-factor) + original_color.r*factor;
                int g = dim_color[1]*(1.0-factor) + original_color.g*factor;
                int b = dim_color[2]*(1.0-factor) + original_color.b*factor;
                esphome::light::AddressableLight* target_led = static_cast<esphome::light::AddressableLight *>(id(all_leds).get_output());
                //ESP_LOGD("button", "Dimming button 1 iteration %d (LED %d) to %d, %d, %d", iteration, led_index, r, g, b);
                target_led->get(led_index).set(esphome::Color(r, g, b));
                target_led->schedule_show();
            - delay: ${dim_between_led_delay}
      - lambda: 'id(button_press_start_time)[0] = 0;'

  - id: dim_led_at_button_2
    mode: restart
    parameters:
      led_index: int
      is_long_press: bool
    then:
      - delay: ${after_touch_dim_delay}
      - repeat:
          count: 10
          then:
            - lambda: |-
                auto original_color = id(original_led_color)[1];
                auto dim_color = (is_long_press) ? id(long_press_color) : id(touch_color);
                float factor = iteration * 0.1f;
                int r = dim_color[0]*(1.0-factor) + original_color.r*factor;
                int g = dim_color[1]*(1.0-factor) + original_color.g*factor;
                int b = dim_color[2]*(1.0-factor) + original_color.b*factor;
                esphome::light::AddressableLight* target_led = static_cast<esphome::light::AddressableLight *>(id(all_leds).get_output());
                //ESP_LOGD("button", "Dimming button 2 iteration %d (LED %d) to %d, %d, %d", iteration, led_index, r, g, b);
                target_led->get(led_index).set(esphome::Color(r, g, b));
                target_led->schedule_show();
            - delay: ${dim_between_led_delay}
      - lambda: 'id(button_press_start_time)[1] = 0;'

  - id: dim_led_at_button_3
    mode: restart
    parameters:
      led_index: int
      is_long_press: bool
    then:
      - delay: ${after_touch_dim_delay}
      - repeat:
          count: 10
          then:
            - lambda: |-
                auto original_color = id(original_led_color)[2];
                auto dim_color = (is_long_press) ? id(long_press_color) : id(touch_color);
                float factor = iteration * 0.1f;
                int r = dim_color[0]*(1.0-factor) + original_color.r*factor;
                int g = dim_color[1]*(1.0-factor) + original_color.g*factor;
                int b = dim_color[2]*(1.0-factor) + original_color.b*factor;
                esphome::light::AddressableLight* target_led = static_cast<esphome::light::AddressableLight *>(id(all_leds).get_output());
                //ESP_LOGD("button", "Dimming button 3 iteration %d (LED %d) to %d, %d, %d", iteration, led_index, r, g, b);
                target_led->get(led_index).set(esphome::Color(r, g, b));
                target_led->schedule_show();
            - delay: ${dim_between_led_delay}
      - lambda: 'id(button_press_start_time)[2] = 0;'

  - id: dim_led_at_button_4
    mode: restart
    parameters:
      led_index: int
      is_long_press: bool
    then:
      - delay: ${after_touch_dim_delay}
      - repeat:
          count: 10
          then:
            - lambda: |-
                auto original_color = id(original_led_color)[3];
                auto dim_color = (is_long_press) ? id(long_press_color) : id(touch_color);
                float factor = iteration * 0.1f;
                int r = dim_color[0]*(1.0-factor) + original_color.r*factor;
                int g = dim_color[1]*(1.0-factor) + original_color.g*factor;
                int b = dim_color[2]*(1.0-factor) + original_color.b*factor;
                esphome::light::AddressableLight* target_led = static_cast<esphome::light::AddressableLight *>(id(all_leds).get_output());
                //ESP_LOGD("button", "Dimming button 4 iteration %d (LED %d) to %d, %d, %d", iteration, led_index, r, g, b);
                target_led->get(led_index).set(esphome::Color(r, g, b));
                target_led->schedule_show();
            - delay: ${dim_between_led_delay}
      - lambda: 'id(button_press_start_time)[3] = 0;'

  - id: refresh_nightlight
    mode: restart
    then:
      - if:
          condition:
            lambda: 'return "${nightlight}" == "on";'
          then:
            - if:
                condition:
                  - sun.is_below_horizon:
                then:
                  - switch.turn_on:
                      id: nightlight
                else:
                  - switch.turn_off:
                      id: nightlight

  - id: led_on_nightlight
    mode: restart
    then:
      - light.turn_on:
          id: leds_nightlight
          brightness: ${nightlight_brightness}
          red: !lambda "return id(nightlight_color)[0]/100.0;"
          green: !lambda "return id(nightlight_color)[1]/100.0;"
          blue:  !lambda "return id(nightlight_color)[2]/100.0;"

# TODO dim the right LEDs based on the button_count
  - id: led_on_swipe_left
    mode: restart
    then:
      - script.stop: led_on_button_press
      - script.stop: dim_led_at_button_1
      - script.stop: dim_led_at_button_2
      - script.stop: dim_led_at_button_3
      - script.stop: dim_led_at_button_4
      - script.execute:
          id: led_on_button_press
          button: 4
          led_index: 6
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: led_on_button_press
          button: 3
          led_index: 8
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: led_on_button_press
          button: 2
          led_index: 10
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: led_on_button_press
          button: 1
          led_index: 12
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: dim_led_at_button_4
          led_index: 6
          is_long_press: false
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: dim_led_at_button_3
          led_index: 8
          is_long_press: false
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: dim_led_at_button_2
          led_index: 10
          is_long_press: false
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: dim_led_at_button_1
          led_index: 12
          is_long_press: false

  - id: led_on_swipe_right
    mode: restart
    then:
      - script.stop: led_on_button_press
      - script.stop: dim_led_at_button_1
      - script.stop: dim_led_at_button_2
      - script.stop: dim_led_at_button_3
      - script.stop: dim_led_at_button_4
      - script.execute:
          id: led_on_button_press
          button: 1
          led_index: 12
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: led_on_button_press
          button: 2
          led_index: 10
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: led_on_button_press
          button: 3
          led_index: 8
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: led_on_button_press
          button: 4
          led_index: 6
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: dim_led_at_button_1
          led_index: 12
          is_long_press: false
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: dim_led_at_button_2
          led_index: 10
          is_long_press: false
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: dim_led_at_button_3
          led_index: 8
          is_long_press: false
      - delay: ${swipe_between_led_delay}
      - script.execute:
          id: dim_led_at_button_4
          led_index: 6
          is_long_press: false

  - id: led_on_full_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${multi_touch_brightness}
          red: !lambda "return id(multi_touch_color)[0]/100.0;"
          green: !lambda "return id(multi_touch_color)[1]/100.0;"
          blue:  !lambda "return id(multi_touch_color)[2]/100.0;"
          effect: ${multi_touch_effect}
# TODO fix this!! on multi release, I want to dim down anything that was pressed
# but this dims down all of the buttons by first turning them on
      - script.execute:
          id: dim_led_at_button_1
          led_index: 12
          is_long_press: false
      - script.execute:
          id: dim_led_at_button_2
          led_index: 10
          is_long_press: false
      - script.execute:
          id: dim_led_at_button_3
          led_index: 8
          is_long_press: false
      - script.execute:
          id: dim_led_at_button_4
          led_index: 6
          is_long_press: false
      - delay: 5s
      - light.turn_off: leds_top

  - id: led_on_long_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds_top
          brightness: ${very_long_press_brightness}
          red: !lambda "return id(very_long_press_color)[0]/100.0;"
          green: !lambda "return id(very_long_press_color)[1]/100.0;"
          blue:  !lambda "return id(very_long_press_color)[2]/100.0;"
          effect: ${very_long_press_effect}
      - delay: 5s
      - light.turn_off: leds_top
